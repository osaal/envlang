(*** TERMINALS ***)
(* Graphemes from the Unicode set

   Parsing: `UnicodeSegmentation::Graphemes()`
   See http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
*)
letter
   = ? Unicode grapheme ?;

(* ASCII digits excluding zero

   Parsing: See digit-zero
*)
digit
   = "1"
   | "2"
   | "3"
   | "4"
   | "5"
   | "6"
   | "7"
   | "8"
   | "9";

(* ASCII digits including zero

   Parsing: NYI
   Use UnicodeSegmentation::unicode_words()
*)
digit-zero
   = "0"
   | digit;

(* Valid non-arithmetic symbols

   Parsing: NYI
*)
generic-symbol
   = "-"
   | "_";

(* Valid arithmetic and set operator symbols

   Note: The multiplication symbol "*" is shared with the wildcard symbol "*"

   Parsing: NYI
*)
arithmetic-operator
   = "+"
   | "-"
   | "*"
   | "/"
   | "^"
   | "%";

(* Environment terminator

   A terminator is used to terminate a non-embraced-enclosed environment
   A terminator is optional if environment scope is embrased

   Parsing: NYI
*)
terminator
   = ";";

(* Accessor symbol

   The accessor symbol is used to access environment members
   The accessor symbol is a period "." followed by a valid identifier
   The accessor symbol is not considered valid outside of environment contexts

   Parsing: NYI
*)
accessor
   = ".";

(* Decimal point

   The decimal point is used to define decimal numbers
   The decimal point is not considered valid outside of floating-point numbers
*)
decimal
   = ".";

(* Assignment symbol

   The assignment symbol is used to assign values to identifiers

   Parsing: NYI
*)
assignment
   = "=";

(* Escape symbol

   The escape symbol escapes other symbols inside strings

   Parsing: NYI
*)
escape
   = "\\";

(* String-specific symbols

   The double and single quotes may be used to define strings

   Parsing: NYI
*)
double-quote
   = "\"";

single-quote
   = "'";

(* Separator symbol

   The separator symbol separates elements in function arguments, inheritance arguments, and return values

   Parsing: NYI
*)
separator
   = ",";

(* Wildcard symbol

   The wildcard is used to inherit all environments or return all values
   The wildcard symbol is only valid in inheritance arguments and function return values
   The symbol is shared with the multiplication operator (see arithmetic-operator)

   Parsing: NYI
*)
wildcard
   = "*";

(* Environment operators

   Environments are defined by a start and end operator

   Parsing: NYI
*)
environment-start-operator
   = "{";

environment-end-operator
   = "}";

environment-operators
   = environment-start-operator
   | environment-end-operator;

(* Inheritance operators

   Inheritance arguments are defined by a start and end operator

   Parsing: NYI
*)
inheritance-argument-start-operator
   = "(";

inheritance-argument-end-operator
   = ")";

inheritance-argument-operators
   = inheritance-argument-start-operator
   | inheritance-argument-end-operator;

(* Function argument operators

   Function arguments are defined by a start and end operator

   Parsing: NYI
*)
function-argument-start-operator
   = "[";

function-argument-end-operator
   = "]";

function-argument-operators
   = function-argument-start-operator
   | function-argument-end-operator;

(* All symbols

   Defines all reserved symbols used in the language
   This does not contain the generic symbols, which are free to be used in identifiers

   Parsing: NYI
*)
symbol
   = arithmetic-operator
   | terminator
   | accessor
   | assignment
   | double-quote
   | single-quote
   | separator
   | wildcard
   | escape
   | environment-operators
   | inheritance-argument-operators
   | function-argument-operators;

(*** KEYWORDS ***)
(* The following keywords are defined:
   - let: Assignment keyword
   - inherit: Inheritance keyword (in contexts of "let")

   Parsing: NYI
*)
assignment-keyword
   = "let";

inheritance-keyword
   = "inherit";

function-keyword
   = "fun";

keywords
   = assignment-keyword
   | inheritance-keyword
   | function-keyword;

(*** WHITESPACE ***)
(* Valid Unicode whitespace characters

   Parsing: NYI
*)
ws
   = "{0009}"
   | "{000A}"
   | "{000B}"
   | "{000C}"
   | "{000D}"
   | "{0020}"
   | "{0085}"
   | "{00A0}"
   | "{1680}"
   | "{2000}"
   | "{2001}"
   | "{2002}"
   | "{2003}"
   | "{2004}"
   | "{2005}"
   | "{2006}"
   | "{2007}"
   | "{2008}"
   | "{2009}"
   | "{200A}"
   | "{2028}"
   | "{2029}"
   | "{202F}"
   | "{205F}"
   | "{3000}";

(* Characters above in order: 
    \u{0009} = Character tabulation
    \u{000A} = Line feed
    \u{000B} = Line tabulation
    \u{000C} = Form feed
    \u{000D} = Carriage return
    \u{0020} = Space
    \u{0085} = Next line
    \u{00A0} = No-break space
    \u{1680} = Ogham space mark
    \u{2000} = En quad
    \u{2001} = Em quad
    \u{2002} = En space
    \u{2003} = Em space
    \u{2004} = Three-per-em space
    \u{2005} = Four-per-em space
    \u{2006} = Six-per-em space
    \u{2007} = Figure space
    \u{2008} = Punctuation space
    \u{2009} = Thin space
    \u{200A} = Hair space
    \u{2028} = Line separator
    \u{2029} = Paragraph separator
    \u{202F} = Narrow no-break space
    \u{205F} = Medium mathematical space
    \u{3000} = Ideographic space
*)

(*** CHARACTERS ***)
(* Valid character set for naming environments

   Characters are either letters or digits
   Characters may be used in identifiers, granted that they do not clash with reserved keywords

   Parsing: NYI
*)
character
   = letter
   | digit;

(* Character arrays

   Example: asdf
            thequickbrownfox
            12345
            a63kgds962üêà
            a

   Character arrays could be identifiers, strings, or numbers

   Parsing: NYI
*)
character-array
   = character , { character };

(*** DATA TYPES ***)
(* Integers

   Example: 123
            456789
            0

   Integers can be strings, parts of identifiers, or numbers

   Parsing: NYI
*)
integer
   = digit , { digit };

(* Floating-point numbers

   Example: 0.005
            3.14
            100.0
            005.0
            .05

   Floating-point numbers are defined by zero or more leading digits, a decimal point ".", and one or more trailing digits
   Any of the digits may be zero
   Leading zeros before the decimal point as well as single zeros after the decimal point are ignored during parsing

   Parsing: NYI
*)
float
   = { digit-zero } , "." , digit-zero , { digit-zero };

(* Strings

   Strings are enclosed with double quotes
   Strings may contain any character, symbol, whitespace or operator

   Any reserved symbols must be escaped with the escape symbol

   Parsing: NYI
*)
double-quote-string
   = double-quote , { character
   | integer
   | ws
   | generic-symbol
   | single-quote
   | ( escape , symbol ) } , double-quote;

single-quote-string
   = single-quote , { character
   | integer
   | ws
   | generic-symbol
   | double-quote
   | ( escape , symbol ) } , single-quote;

(* Boolean values

   Example: true
            false

   Boolean values are used to represent truth values
   Boolean values are case-sensitive

   Parsing: NYI
*)
boolean
   = ( "t" , "r" , "u" , "e" )
   | ( "f" , "a" , "l" , "s" , "e" );

(* Primitive data types

   Primitive data types are either integers, floating-point numbers, strings, or boolean values

   Parsing: NYI
*)
data-type
   = integer
   | float
   | double-quote-string
   | single-quote-string
   | boolean;

(*** IDENTIFIERS ***)
(* Environment identifiers

   Environment identifiers are used to name everything treated as an environment
   Identifiers must start with a letter, followed by zero or more letters, digits or generic symbols
   Identifiers may not contain whitespace characters

   Parsing: NYI
*)
identifier
   = letter , { character
   | generic-symbol };

(* Accessed identifier

   Example: a.b.c
            a.b
            a        // Self-accession

   Accessed identifiers are used to access environment members
   Accessed identifiers are formed by an identifier followed by zero or more accessors

   Parsing: NYI
*)
accessed-identifier
   = identifier , { accessor , identifier };

(*** ARGUMENT LISTS ***)
(* Inheritance arguments

   Example: (a, b, c) or (*\)
   Note: Example wildcard closing parenthesis escaped for file formatting

   Inheritance arguments are surrounded by parentheses
   Arguments may be either a wildcard, or one or more identifiers separated by commas
   All whitespace is ignored
   Hanging commas are not allowed

   Style preference: (a, b, c), (*\)

   Parsing: NYI
*)
inheritance-argument
   = inheritance-argument-start-operator , { ws } ,
   ( wildcard
   | ( identifier , { { ws } , separator, { ws }, identifier } ) ) ,
   { ws } , inheritance-argument-end-operator;

(* Function arguments 
   
   Example: []
            [a]
            [a, b, c]
            [a         ,    b, c   ]
            [       ]

   Function arguments are surrounded by square brackets
   Function arguments may contain zero or more identifiers separated by commas
   All whitespace is ignored
   Hanging commas are not allowed

   Style preference: [a, b, c], []

   Parsing: NYI
*)
function-argument
   = function-argument-start-operator ,
   { ws } ,
   [ identifier , { { ws } , separator , { ws } , identifier } ] ,
   function-argument-end-operator;

(*** ASSIGNMENTS ***)
(* Non-function assignments
   Example: let a = { let x = 3; }; // Environment assignment
            let b = 5;              // Data type assignment
            let c = b;              // Identifier assignment
            let d = e = c;          // Chained identifier assignment
            let f = a.x;            // Accessor assignment
            let g = h = a.x;        // Chained accessor assignment

   Note, that chained accessor assignments can only include accessors as the last assignment.
   The following are thus not allowed:
   - let a = b.c = d;
   - let a.b = c = d;
   
   Style preferences:
   - Add one space character between the assignment keyword and the identifier
   - Add one space character between the identifier and the assignment operator
   - Add one space character between the assignment operator and the assignment value
   - Add no spaces between the value and the terminator

   TODO: Write accessor assignment logic!
*)
non-function-assignment
   = assignment-keyword , { ws } , 
   identifier , { ws } ,
   assignment , { ws } ,
   ( explicit-environment , { ws } , terminator 
   | ( data-type , { ws } , terminator )
   | ( identifier ,
         { { ws } , assignment , { ws } , identifier } ,
         [ { ws } , assignment , { ws } , accessed-identifier ] ,
         { ws } , terminator
      )
   );

(* Inherited assignments

   Example: let a inherit (b, c) = { ... };

   The keyword 'inherit' may be surrounded by one valid whitespace character, but not more than one
   The keyword must be followed by the inheritance arguments
   The keyword not considered valid outside of assignment contexts

   Inheritance is not allowed in chains. The following is thus not allowed:
   - let a inherit (b, c) = x inherit (d, e) = ... ;
   The main reason is that chained inheritance would result in opaque and hard-to-read code.

   Parsing: NYI
*)
inherited-assignment
   = assignment-keyword , { ws } ,
   identifier , { ws } ,
   inheritance-keyword , { ws } ,
   inheritance-argument;

(* Function assignments

   Example: let fun b[c, d] = { ... };

   Precludes an assignment
   The keyword 'fun' may be surrounded by one valid whitespace character, but not more than one
   The keyword must be followed by an identifier
   The identifier must be followed by a function argument list
   The function argument list is surrounded by square brackets and may contain zero or more identifiers separated by commas
   The function argument list may be surrounded by optional whitespace
   The function argument list is followed by an assignment
   The assignment is followed by an explicit environment

   Functions may not inherit, since that would break against the purity of functions
   Functions may, however, be inherited, since their declaration is static and thus cannot cause namespace collisions:

   let fun a[] = { ... };
   let b inherit (a) = { ... };

   Parsing: NYI
*)
function-assignment
   = assignment-keyword , { ws } ,
   function-keyword , { ws } ,
   identifier , { ws } ,
   function-argument, { ws } ,
   assignment , { ws } ,
   explicit-environment;

(*** ENVIRONMENTS ***)
(* Explicit environments

   Example: { a = 5; b = 6; c = 7; }
            { a = { b = 5; c = 6; d = 7; }; }
            { a = { b = 5; c = 6; d = 7; }; e = 8; }
            { 5; }

   Explicit environments are surrounded by braces
   Explicit environments may contain zero or more of the following: inherited assignments, function assignments, non-function assignments, or data types
   If an explicit environment is empty, it may contain only optional whitespace
   If the environment contains a data-type, it must be followed by a terminator
   Explicit environments cannot contain more than one naked data-type

   Parsing: NYI
*)
explicit-environment
   = environment-start-operator ,
   { { ws } , ( inherited-assignment | function-assignment | non-function-assignment ) } 
   | [ data-type , { ws }, terminator ],
   { ws } ,
   environment-end-operator;
